

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.String
    access_token String? @db.String
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.String
    session_state String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
    @@index([userId])
}

enum UserRole{
  ADMIN
  USER
}
model User{

  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  password String?
  channels String?
  is_away Boolean @default(false)
  is_online Boolean @default(false)
  is_busy Boolean @default(false)
  is_muted Boolean @default(false)
  is_deaf Boolean @default(false)
  is_streaming Boolean @default(false)
  is_mobile Boolean @default(false)
  is_desktop Boolean @default(false)
  is_tablet Boolean @default(false)
  is_mobile_device Boolean @default(false)
  is_desktop_device Boolean @default(false)
  is_tablet_device Boolean @default(false)
  is_mobile_browser Boolean @default(false)
  is_desktop_browser Boolean @default(false)
  type String?
  workspaces Workspaces[]

  role UserRole @default(USER)
}

model Channel{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type String
  workspaceId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workspace Workspaces @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@index([workspaceId])
  
}

model Workspaces{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  avatar String?
  userId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invite_code String?
  slug_code String?
  regulator String?
  super_admin String? @db.ObjectId
  members User @relation(fields: [userId], references: [id], onDelete: Cascade)
  channels Channel[]
}

model VerificationToken{
  id String @id @default(auto())  @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model passwordResetToken{
  id String @id @default(auto())  @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}